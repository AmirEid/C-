The keyword This, helps you to access a class member function or a class attribute within the costructor of destructor. These 2 functions are public member and they get executed once in the main the class gets instanced. 
The initialization list a1(p1), a2(p2)..etc. this is used for example to initialize attributes within the constructor. Class::Constructor(char a1, char a2) : a1(p2), a2(p2). and in the main function i need to pass those 2 parameteres.
The constructor will always be called first with instanciation. the destructor will be called before the main returns 0.

CONST is an important thing, because it means that these attributes will never change throughout the code. something I should always use whenever possible for safe programming. 
void bar () const; initialization.
void sample:bar() const {}; declaration.
so in the class within the header, if an attribute is a const, we could initialized it through initialization list in the constructor function declaration.

What is private and what is public. I should make public whatever that I allow the user to access. For example the phone book ex, drawing the display table should be private since the user should have no access to it. 

Getter and setter are very useful in the class functions.

physical and structual comparissons, 2 instances even if they are structurally the same, they are physically not the same. because they have 2 different addresses. 
== operand helps to compare addresses, while compare member function could help checking the values within the different instances.

Member and non member functions, lets say we could have two levels:
the instance level and the class level... like knowing how many instances were created. that is not interesting in the instance level.
There are differences, the non member in a class, there is no KEYWORD "THIS" could be used to access it, because there are no pointer created for it. so if we return we return the attribute itself and not THIS.
to initialize a non-member: int sample::nbisnt = 0; you cant use initialization list.

in the main function i could initialize a pointer like the following:
Class instance;
Class* instancep = &instance;

here i can declare and initialize a pointer within the same class
int Class::*p = NULL;
void (Class::*f)(void) const;
p = &Class::attribute member;
f = &Class::attribute function;
till this point we just initialized and assigned the pointer but we dont know which instance will use them. but they are available for all.
instance.*p = 42;
instancep->*p = 21;
(instance.*f)();
(instancep->*f)();
